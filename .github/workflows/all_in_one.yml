on:
  workflow_call:
    inputs:
      docker_file:
        type: string
        default: 'docker/images/dev/Dockerfile'
        required: false
      compose_file:
        type: string
        default: 'docker/compose/dev/docker-compose.yml'
        required: false
      env_file:
        type: string
        default: '.env'
        required: false
      do_build:
        type: boolean
        default: true
        required: false
      do_build_push:
        type: boolean
        default: true
        required: false
      do_deploy:
        type: boolean
        default: true
        required: false

    secrets:
      env_vars:
        required: false

jobs:
  setup:
    runs-on: apifornia-builder
    outputs:
      CALLER_REPO_NAME: ${{ steps.setup.outputs.CALLER_REPO_NAME }}
      DEPLOY_RUNNER: ${{ steps.setup.outputs.DEPLOY_RUNNER }}
      EXTRA_TAG: ${{ steps.setup.outputs.EXTRA_TAG }}
    steps:
      - id: setup
        name: Setup
        uses: apifornia/github-actions/setup-logic@main
  
  build:
    runs-on: apifornia-builder
    if: "${{ inputs.do_build == true }}"
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Generate .env file
        run: echo "${{ secrets.env_vars }}" > ${{ inputs.env_file }}
      
      - name: Get Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=${{ needs.setup.outputs.EXTRA_TAG }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ inputs.docker_file }}
          push: ${{ inputs.do_build_push }}
          tags: ${{ steps.meta.outputs.tags }}

  deploy:
    needs: [setup,build]
    runs-on: ${{ needs.setup.outputs.DEPLOY_RUNNER }}
    if: "${{ inputs.do_deploy == true }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Generate .env file
        run: echo "${{ secrets.env_vars }}" > ${{ inputs.env_file }}
      
      - name: Get Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ github.sha }}
      
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint and show compose manifest
        env:
          IMAGE_NAME: ${{ steps.meta.outputs.tags }}
          CI_PROJECT_NAME: ${{ needs.setup.outputs.CALLER_REPO_NAME }}
          ENV_VARS: ${{ inputs.env_vars }}
        run: >
          /usr/bin/docker compose
          -p ${{ needs.setup.outputs.CALLER_REPO_NAME }}
          -f ${{ inputs.compose_file }}
          --env-file ${{ inputs.env_file }}
          convert
      
      - name: Pre-pull new Docker-image
        env:
          IMAGE_NAME: ${{ steps.meta.outputs.tags }}
          CI_PROJECT_NAME: ${{ needs.setup.outputs.CALLER_REPO_NAME }}
          ENV_VARS: ${{ inputs.env_vars }}
        run: >
          /usr/bin/docker compose
          -p ${{ needs.setup.outputs.CALLER_REPO_NAME }}
          -f ${{ inputs.compose_file }}
          --env-file ${{ inputs.env_file }}
          pull --quiet
      
      - name: Update and start App
        env:
          IMAGE_NAME: ${{ steps.meta.outputs.tags }}
          CI_PROJECT_NAME: ${{ needs.setup.outputs.CALLER_REPO_NAME }}
          ENV_VARS: ${{ inputs.env_vars }}
        run: >
          env && /usr/bin/docker compose
          -p ${{ needs.setup.outputs.CALLER_REPO_NAME }}
          -f ${{ inputs.compose_file }}
          --env-file ${{ inputs.env_file }}
          up --detach

  deploy-k8s:
    needs: [setup,build]
    runs-on: ${{ needs.setup.outputs.DEPLOY_RUNNER }}-k8s
    if: "${{ inputs.do_deploy == true && github.ref == 'refs/heads/k8s' }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Namespace check
        run: |
          NS_EXISTS=$(kubectl get ns ${{ needs.setup.outputs.CALLER_REPO_NAME }})
          if [ "$NS_EXISTS" != "0" ]; then
            kubectl create ns ${{ needs.setup.outputs.CALLER_REPO_NAME }}
            kubectl create secret docker-registry ghcr-io --docker-server=https://ghcr.io --docker-username=github --docker-password=$(gh variable get REGISTRY_TOKEN) --docker-email=devops@apifornia.com -n ${{ needs.setup.outputs.CALLER_REPO_NAME }}
            echo "Namespace and pullsecret created"
          else
            exit 0
          fi

      - name: Lint and show compose manifest
        env:
          IMAGE_NAME: ${{ steps.meta.outputs.tags }}
          CI_PROJECT_NAME: ${{ needs.setup.outputs.CALLER_REPO_NAME }}
          ENV_VARS: ${{ inputs.env_vars }}
        run: >
          helm -v

# commented because docker image cleanup job runs on the server each week
#  post:
#    runs-on: apifornia-builder
#    needs: [setup,build,deploy]
#    steps:
#      - name: Cleanup
#        run: |
#          docker image rm -f ${{ steps.meta.outputs.tags }} || true
