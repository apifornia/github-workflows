on:
  workflow_call:
    inputs:
      docker_file:
        type: string
        default: 'deploy/docker/images/dev/Dockerfile'
        required: false
      env_file:
        type: string
        default: '.env'
        required: false
      do_build:
        type: boolean
        default: true
        required: false
      do_build_push:
        type: boolean
        default: true
        required: false
      do_deploy:
        type: boolean
        default: true
        required: false

    secrets:
      build_vars:
        required: false
      deploy_vars:
        required: false
      gh_token:
        required: false

jobs:
  setup:
    runs-on: apifornia-builder
    outputs:
      CALLER_REPO_NAME: ${{ steps.setup.outputs.CALLER_REPO_NAME }}
      DEPLOY_RUNNER: ${{ steps.setup.outputs.DEPLOY_RUNNER }}
      EXTRA_TAG: ${{ steps.setup.outputs.EXTRA_TAG }}
    steps:
      - id: setup
        name: Setup
        uses: apifornia/github-actions/setup-logic@main
  
  build:
    runs-on: apifornia-builder
    if: "${{ inputs.do_build == true }}"
    outputs:
      TAGS: ${{ steps.meta.outputs.tags }}
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Generate .env file
        run: echo "${{ secrets.build_vars }}" > ${{ inputs.env_file }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get Docker metadata - SHA tag
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ github.sha }}

      - name: Get Docker metadata - ENV tag
        id: meta2
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ needs.setup.outputs.EXTRA_TAG }}

      - name: Build and push - SHA tag
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ inputs.docker_file }}
          push: ${{ inputs.do_build_push }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Build and push - ENV tag
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ inputs.docker_file }}
          push: ${{ inputs.do_build_push }}
          tags: ${{ steps.meta2.outputs.tags }}

  deploy-k8s:
    needs: [setup,build]
    runs-on: ${{ needs.setup.outputs.DEPLOY_RUNNER }}-k8s
    if: "${{ inputs.do_deploy == true }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Namespace check
        run: |
          set +e
          NS_EXISTS=$(kubectl get ns ${{ needs.setup.outputs.CALLER_REPO_NAME }})
          if [ "$NS_EXISTS" != "0" ]; then
            chmod +x /actions-runner/kubectl
            kubectl create ns ${{ needs.setup.outputs.CALLER_REPO_NAME }}
            #echo  "${{ secrets.gh_token }}" | gh auth login --with-token
            #DOCKER_PASSWORD=$(gh variable get REGISTRY_TOKEN)
            kubectl create secret docker-registry ghcr-io --docker-server="ghcr.io" --docker-username="github" --docker-password="${{ secrets.gh_token }}" -n ${{ needs.setup.outputs.CALLER_REPO_NAME }}
            echo "Namespace and pullsecret created"
          else
            exit 0
          fi

      - name: Generate .env file
        run: |
          echo "${{ secrets.deploy_vars }}" > deploy/chart/secrets
          echo "APP_BUILD_DATE: \"$(date '+%Y%m%d%H%M')\"" >> deploy/chart/secrets

      - name: Helm install
        env:
          IMAGE_NAME: ${{ steps.meta.outputs.tags }}
        run: >
          helm upgrade "${{ needs.setup.outputs.CALLER_REPO_NAME }}" ./deploy/chart
          -f ./deploy/chart/values-${{ needs.setup.outputs.EXTRA_TAG }}.yml
          --install
          --atomic
          --namespace "${{ needs.setup.outputs.CALLER_REPO_NAME }}"
          --set image="${{ needs.build.outputs.TAGS }}"
          --set git_commit="${GITHUB_SHA}"
